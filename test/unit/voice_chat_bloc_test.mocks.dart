// Mocks generated by Mockito 5.4.6 from annotations
// in voice_ai_app/test/unit/voice_chat_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:voice_ai_app/core/errors/failures.dart' as _i6;
import 'package:voice_ai_app/core/services/conversation_summarizer.dart' as _i9;
import 'package:voice_ai_app/features/voice_chat/domain/entities/audio_response.dart'
    as _i7;
import 'package:voice_ai_app/features/voice_chat/domain/entities/voice_message.dart'
    as _i8;
import 'package:voice_ai_app/features/voice_chat/domain/repositories/voice_chat_repository.dart'
    as _i2;
import 'package:voice_ai_app/features/voice_chat/domain/usecases/send_message_usecase.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVoiceChatRepository_0 extends _i1.SmartFake
    implements _i2.VoiceChatRepository {
  _FakeVoiceChatRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SendMessageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendMessageUseCase extends _i1.Mock
    implements _i4.SendMessageUseCase {
  MockSendMessageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.VoiceChatRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeVoiceChatRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.VoiceChatRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i5.Stream<_i7.AudioResponse>>> call(
          _i4.SendMessageParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<
                _i3.Either<_i6.Failure, _i5.Stream<_i7.AudioResponse>>>.value(
            _FakeEither_1<_i6.Failure, _i5.Stream<_i7.AudioResponse>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i5.Stream<_i7.AudioResponse>>>);
}

/// A class which mocks [VoiceChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVoiceChatRepository extends _i1.Mock
    implements _i2.VoiceChatRepository {
  MockVoiceChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.ConnectionStatus> get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i5.Stream<_i2.ConnectionStatus>.empty(),
      ) as _i5.Stream<_i2.ConnectionStatus>);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure, _i5.Stream<_i7.AudioResponse>>> sendMessage({
    required String? message,
    String? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #message: message,
            #context: context,
          },
        ),
        returnValue: _i5.Future<
                _i3.Either<_i6.Failure, _i5.Stream<_i7.AudioResponse>>>.value(
            _FakeEither_1<_i6.Failure, _i5.Stream<_i7.AudioResponse>>(
          this,
          Invocation.method(
            #sendMessage,
            [],
            {
              #message: message,
              #context: context,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i5.Stream<_i7.AudioResponse>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #connect,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #disconnect,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> wrapUpCurrentResponse() =>
      (super.noSuchMethod(
        Invocation.method(
          #wrapUpCurrentResponse,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #wrapUpCurrentResponse,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i8.VoiceMessage>>>
      getChatHistory() => (super.noSuchMethod(
            Invocation.method(
              #getChatHistory,
              [],
            ),
            returnValue: _i5
                .Future<_i3.Either<_i6.Failure, List<_i8.VoiceMessage>>>.value(
                _FakeEither_1<_i6.Failure, List<_i8.VoiceMessage>>(
              this,
              Invocation.method(
                #getChatHistory,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, List<_i8.VoiceMessage>>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> clearChatHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearChatHistory,
          [],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
            _FakeEither_1<_i6.Failure, void>(
          this,
          Invocation.method(
            #clearChatHistory,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [ConversationSummarizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockConversationSummarizer extends _i1.Mock
    implements _i9.ConversationSummarizer {
  MockConversationSummarizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String summarizeRecentHistory(List<_i8.VoiceMessage>? messages) =>
      (super.noSuchMethod(
        Invocation.method(
          #summarizeRecentHistory,
          [messages],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #summarizeRecentHistory,
            [messages],
          ),
        ),
      ) as String);

  @override
  String getConversationFlow(List<_i8.VoiceMessage>? messages) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConversationFlow,
          [messages],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #getConversationFlow,
            [messages],
          ),
        ),
      ) as String);

  @override
  String buildContextWithHistory(
    String? baseContext,
    String? currentMessage,
    List<_i8.VoiceMessage>? messages,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildContextWithHistory,
          [
            baseContext,
            currentMessage,
            messages,
          ],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #buildContextWithHistory,
            [
              baseContext,
              currentMessage,
              messages,
            ],
          ),
        ),
      ) as String);
}
